<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="assemblageJar" default="make" basedir="../.">

	<!-- Ajout d'un package pour utiliser le task IF -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!-- Ajout d'un package pour utiliser le task XML -->
	 <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>

	<!-- *********************************************************************
	Ce script permet de packager les jar utilisées par eFluid en dehors de l'EAR 
	et du zip des batchs.
	Ces jar sont ensuite mis dans le classepath.

	Avant de lancer le script fixer les paramètres d'environnement.

		set JAVA_HOME=d:\Programs\jdk1.4
		set ANT_HOME=D:\Programs\ant\apache-ant-1.5.3-1
		set CVSHOME=D:\Programs\WinCvs

		set PATH=%ANT_HOME%\bin;%JAVA_HOME%\bin;%CVSHOME%


	Ce script attend en paramètre :

	OBLIGATOIRES
		cvs.module 			: nom COMPLET du module CVS à récupérer
		cvs.tag 				: version du module à récupérer. Si la valeur vaut LAST alors c'est la dernière version (non étiquetée) qui est	récupérée
		type						: BATCH pour paquager les jar des batchs, EAR pour ceux de l'EAR, ALL pour tous.

	OPTIONNELS
		versionOracle 	: version d'Oracle 9.2.0.1, 9.2.0.5 (uniquement pour les batchs)
		versionWL				: version de weblogic WL81SP1, WL81SP2, WL81SP3 (uniquement pour les batchs)
		etape 					: etape de démmarrage du script. Pas de valeur par défaut (=> 1)
		cvs.login				: login pour se connecter à CVS. Par défaut adminDEV
		cvs.server			: serveur hébergeant la base CVS. Par défaut hermescvs
		cvs.repo				: repository où sont les sources. Par défaut /DEV
		Ces trois paramètres peuvent être remplacé par un paramètre global (cvs.root=:pserver:${cvs.login}@${cvs.server}:${cvs.repo})

		property.file			: fichier avec toutes les properties de lancement du script. Prend le dessus sur les paramètres passé par la ligne de commande
		property.file.dir : répertoire où se trouve property.file. Par défaut, ${root}\scripts

	La chaîne de lancement est donc (par exemple)

	ant -f assemblageJar.xml -Dtype=EAR -Dcvs.module=Developpement_dev/Hermes -Dcvs.tag=LIV_4_0_11
		[ -Detape=3]

	*********************************************************************
	-->

	<target name="getLASTFromCVS">
			<cvs cvsRoot="${cvs.root}" package="${cvs.module}/scripts/lib" quiet="yes" dest="${cvs.dir}"/>
			<echo file="${log.file}" append="true">
				La dernière version de l'application ${cvs.module} a été récupérée
			</echo>
	</target>
	
	<target name="getThisTagFromCVS">
		<property name="curTag" value="${item}"/>
		<cvs cvsRoot="${cvs.root}" package="${cvs.module}/scripts/lib" quiet="yes" dest="${checkout.dir}" tag="${curTag}" />
		<move todir="${cvs.dir}" overwrite="true">
			<fileset dir="${checkout.dir}" />
		</move>
		<delete	dir="${checkout.dir}"/>
		<echo file="${log.file}" append="true">
			La version ${curTag} de l'application ${cvs.module} a été récupérée
		</echo>
	</target>


	<!--
	*********************************************************************
	le résultat du script se trouve dans le répertoire exported.dir.
	Il s'agit d'un zip
	*******************************************************************
	-->
	<property name="app_jar" value="hermesBatch.jar"/>

	<!--
	*********************************************************************
		Initialisations
	*********************************************************************
	-->
	<target name="init" depends="">

	<!-- ExecDir -->
		<if>
			<not><isset property="${execDir}"/></not>
		<then>
			<property name="execDir" value="${basedir}"/>
		</then>
		</if>
		<property name="root" value="${execDir}"/>
	

		<property name="temp.dir" value="${root}/tmp"/>
		<property name="cvs.dir" value="${temp.dir}/projet"/>
		<property name="projet.dir" value="${cvs.dir}"/>
		<property name="checkout.dir" value="${temp.dir}/checkout"/>

		<property name="type.BATCH" value="BATCH" />
		<property name="type.EAR" value="EAR" />
		<property name="type.ALL" value="ALL" />

		<buildnumber file="${root}/build.number"/>
		<tstamp>
			<format property="TODAY_UK" pattern="d-MMMM-yyyy hh:mm:ss" locale="en"/>
		</tstamp>

		<!-- Le répertoire de log et le fichier log du script -->
		<property name="log.dir" value="${temp.dir}/log/jar/${type}.${build.number}"/>
		<property name="log.file" value="${log.dir}/assemblageJar.log"/>

		<!-- creation du répertoire et du fichier de log général -->
		<delete dir="${log.dir}"/>
			<mkdir dir="${log.dir}"/>
		<echo file="${log.file}" append="true">
		*********************************************************************
		Lancement du script d'intégration
		*********************************************************************
		</echo>

		<!-- chargement d'un éventuel fichier properties avec les paramètres de lancement-->
		<!-- chargement d'un éventuel fichier properties avec les paramètres de lancement-->
		<if>
			<equals arg1="${property.file.dir}" arg2="$${property.file.dir}"/>
		<then>
			<property name="property.file.dir" value="scripts"/>
		</then>
		</if>
		<available file="${root}/${property.file.dir}/${property.file}" property="property.file.present" />
		<if>
			<equals arg1="${property.file.present}" arg2="true" />
			<then>
				<echo file="${log.file}" append="true">
		Utilisation du fichier ${property.file}
				</echo>
				<loadproperties srcFile="${root}/${property.file.dir}/${property.file}"/>
			</then>
			<else>
				<echo file="${log.file}" append="true">
			Pas de fichier de propriétés dans ${root}\${property.file.dir}
				</echo>
			</else>
		</if>

		<!-- propriétés pour le déroulement des étapes du script -->
		<property name="oui" value="Y"/>
		<property name="non" value="N"/>
		<property name="etapeAutorisee" value="autorisee"/>
		<property name="etapeNonAutorisee" value="nonAutorisee"/>

		<property name="exported.dir" value="${root}/jars/${type}"/>
		
		<!-- connexion à CVS -->
		<if>
			<equals arg1="${cvs.login}" arg2="$${cvs.login}" />
			<then>
				<property name="cvs.login" value="adminDEV"/>
			</then>
		</if>
		<if>
			<equals arg1="${cvs.server}" arg2="$${cvs.server}" />
			<then>
				<property name="cvs.server" value="hermescvs"/>
			</then>
		</if>
		<if>
			<equals arg1="${cvs.repo}" arg2="$${cvs.repo}" />
			<then>
				<property name="cvs.repo" value="/DEV"/>
			</then>
		</if>
		<property name="cvs.root" value=":pserver:${cvs.login}@${cvs.server}:${cvs.repo}"/>
		<echo file="${log.file}" append="true">
			connexion à CVS = ${cvs.root}
		</echo>

		<property name="app_zip" value="${exported.dir}/jar_${type}.zip"/>

		<!--
		*********************************************************************
		Recherche des librairies nécessaires.
		Le lecteur I doit être mappé sur
			Zurich\Java à Paris,
			Chablis\Java à Metz
		*********************************************************************
		-->

		<property name="ldap.home" value="I:/ldap"/>

		<!-- Version Weblogic -->
		<if>
			<not><isset property="${versionWL}"/></not>
			<then>
				<property name="versionWL" value="WL81SP3"/>
			</then>
		</if>
		<property name="weblogic.home" value="I:/bea/${versionWL}"/>

		<!-- Version Oracle -->
		<if>
			<not><isset property="${versionOracle}"/></not>
			<then>
				<property name="versionOracle" value="9.2.0.5"/>
			</then>
		</if>
		<property name="oracle.home" value="I:/Oracle/${versionOracle}"/>

		<!-- Répertoire additionnel pour les batchs : xerces + jsaper + axis + ... -->
		<property name="script.lib.dir" value="${projet.dir}/${cvs.module}/scripts/lib"/>

		<!--Etapes du script. A executer dans l'ordre -->
		<echo file="${log.file}" append="true">
		Etape de démarrage du script : ${etape}
		</echo>
		<switch value="${etape}">
			<case value="2">
				<property name="etape1" value="${etapeNonAutorisee}" />
			</case>
			<default>
				<echo file="${log.file}" append="true">
					=> Cas par défaut. Toutes les étapes du script seront exécutées
				</echo>
			</default>
		</switch>
		<!--
		les property qui n'auraient pas été valuées précédemment le sont à présent.
		La valeur mise fait en sorte que l'étape est autorisée.
		-->
		<property name="etape1" value="${etapeAutorisee}"/>
		<property name="etape2" value="${etapeAutorisee}"/>
	</target>


	<!--
	*********************************************************************
	ETAPE 1

	Création d'une copie locale du module fonctionnel
	On récupère uniquement les sources taggés

	N.B.
	le user de connexion à CVS est un paramètre du script.
	idem pour le nom du serveur CVS
	le tag "cvs.tag" est un paramètre du script. Si ce tag vaut LAST alors
	c'est la dernière version de chaque fichier qui est récupérée.

	*********************************************************************
	-->
	<target name="getFromCVS" depends="init">
	<echo file="${log.file}" append="true">
		*********************************************************************
		ETAPE 1 : Récupération du source de CVS
		*********************************************************************
	</echo>
	<if>
 		<equals arg1="${etape1}" arg2="${etapeAutorisee}" />
	<then>
		<delete	dir="${cvs.dir}"/>
		<mkdir	dir="${cvs.dir}"/>
		
		<if>
			<equals arg1="${cvs.tag}" arg2="LAST" />
		<then>
			<antcall target="getLASTFromCVS"/>
		</then>
		<else>
			<foreach list="${cvs.tag}" target="getThisTagFromCVS" delimiter="+" param="item" inheritall="true" />
		</else>
		</if>
	</then>
	<else>
		<echo file="${log.file}" append="true">
			les sources de l'application ${cvs.module} n'ont pas été récupérées
		</echo>
	</else>
	</if>
	</target>

	<!--
	*********************************************************************
	ETAPE 2 : génération du Zip des jar
	*********************************************************************
	-->
	<target name="makeZip" depends="getFromCVS">
	<echo file="${log.file}" append="true">
		*********************************************************************
			ETAPE 2 :	Création du Zip des jars.
		*********************************************************************
	</echo>
	<record name="${log.dir}/makeZip.log" action="start" />
	<delete dir="${exported.dir}/zip"/>
	<mkdir dir="${exported.dir}/zip"/>
	<if>
		<equals arg1="${etape2}" arg2="${etapeAutorisee}" />
	<then>
		<delete file="${app_zip}"/>

		<copy todir="${exported.dir}/zip" flatten="true">
			<fileset dir="${script.lib.dir}" includes="**/saaj.jar"/>
			<fileset dir="${script.lib.dir}" includes="**/jaxrpc.jar"/>
			<fileset dir="${script.lib.dir}" includes="**/axis.jar"/>
			<fileset dir="${script.lib.dir}" includes="**/commons-discovery.jar"/>
			<fileset dir="${script.lib.dir}" includes="**/commons-logging.jar"/>
			<fileset dir="${script.lib.dir}" includes="**/activation.jar"/>
			<fileset dir="${script.lib.dir}" includes="**/mail.jar"/>
			<fileset dir="${ldap.home}" includes="**/*.jar"/>
			<fileset dir="${oracle.home}" includes="**/*.jar"/>
			<fileset dir="${weblogic.home}" includes="**/weblogic.jar"/>
		</copy>

		<zip destfile="${app_zip}" basedir="${exported.dir}/zip"/>
		
		<!-- nettoyage des sous-répertoires -->
		<delete dir="${exported.dir}/jar"/>
		<delete dir="${exported.dir}/zip"/>

		<echo file="${log.file}" append="true">
			OK
		</echo>
	</then>
	<else>
		<echo file="${log.file}" append="true">
			le fichier Zip n'a pas été créé
		</echo>
	</else>
	</if>
	<record name="${log.dir}/makeZip.log" action="stop" />
	</target>

	<target name="make">
		<antcall target="makeZip"/>
	</target>

</project>
