<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="reassemblageEjbProxy" default="make" basedir="../.">

	<!-- Ajout d'un package pour utiliser le task IF -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!-- Ajout d'un package pour utiliser le task XML -->
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>

	<!-- Ajout d'un package pour utiliser le task GenIC de jonas -->
	<taskdef name="genic" classname="org.objectweb.jonas.ant.GenICTask"/>


	<!-- *********************************************************************
	Ce script permet de paramétrer l'application avant déploiement sous Weblogic.

		etape 1 : récupération des sources CVS
		etape 2 : unzip des binaires
		etape 3 : properties de paramétrage
		etape 4 : ear

	Ce script attend en paramètre :

	OBLIGATOIRES
	cvs.basemodule 		: nom COMPLET du module de base CVS à récupérer contenant les livraisons (ex : assemblage)
	source.versionCVS : nom du tag posé sur le source. Par défaut = LAST (dernière version archivée dans INT)

	cvs.lot 		: lot du module à récupérer (Lot2 par ex). Il s'agit du nom du répertoire du lot dans CVS int 
	cvs.tag 		: version du module à récupérer (LIV_2_1_14 par ex).  Il s'agit du nom du répertoire de la livraison dans CVS int

	context1 : un nom de l'application archivé (= sous répertoire CVS). Valeur par défaut : hermes
	context2 : nom du contexte de déploiement de l'application (= sous répertoire du paramétrage). Valeur par défaut : hermes

	OPTIONNELS
	etape : etape de démmarrage du script. Pas de valeur par défaut
					(=> on commence donc par la première étape)

	librairies.specifiques	: liste des jar à inclure dans le war (none par défaut)
	librairies.specifiques.dir	: répertoire où se trouvent les librairies.
	librairies.specifiques.classpath: classpath additionnel si on rajoute des librairies en plus (optionnel)

	typeAppServer   : nom du serveur d'application. Ex. jonas, weblogic, websphere.

	La chaîne de lancement est donc (par exemple)

	ant -f reassemblageEjbProxy.xml -Dcvs.basemodule=assemblage -Dcvs.tag=LIV_2_1_14 -Dcvs.lot=LOT2.1 -Dcontext1=hermesSP1 -Dcontext2=hermesMOA2114
	 [-Detape=1 -DcompilJSP=Y -DtypeAppServer=weblogic ]

	*********************************************************************
	-->


	<!-- propriétés pour le déroulement des étapes du script -->
	<property name="oui" value="Y"/>
	<property name="non" value="N"/>
	<property name="etapeAutorisee" value="${oui}"/>
	<property name="etapeNonAutorisee" value="${non}"/>

	<target name="majFichierDeploiementEJB.xml">
		<copy file="${fichierDeploiementEJB}" tofile="${fichierDeploiementEJB}.old"/>

		<!-- récupération du nom du fichier (sans le chemin) -->
		<basename property="fichierDeploiementEJB.file" file="${fichierDeploiementEJB}" />

		<propertycopy name="ejb.jndi.path" from="${fichierDeploiementEJB.file}.jndi.path"/>
		<propertycopy name="ejb.dtd.catalogue" from="${fichierDeploiementEJB.file}.xmlcatalog"/>
		<propertycopy name="ejb.dtd.file" from="${fichierDeploiementEJB.file}.dtd"/>
		
		<echo file="${log.file}" append="true">
		Les paramètres sont :
			fichierDeploiementEJB.file=${fichierDeploiementEJB.file}
			jndi.path = ${ejb.jndi.path}
			catalogue = ${ejb.dtd.catalogue}
			dtd = ${ejb.dtd.file}
		</echo>

		<if>
			<equals arg1="${fichierDeploiementEJB.file}" arg2="jonas-ejb-jar.xml"/>
			<then>
				<!-- problème avec le DTD Jonas -->
				<replace file="${fichierDeploiementEJB}" token='businessControllerProxy' value='businessController${context2bis}' />
			</then>
			<else>
				<xmlcatalog id="dtds">
 					<dtd publicId="${ejb.dtd.catalogue}" location="${script.xml.dtd.dir}/${ejb.dtd.file}"/>
				</xmlcatalog>
				<xmltask source="${fichierDeploiementEJB}.old" dest="${fichierDeploiementEJB}" >
					<xmlcatalog refid="dtds"/>
					<replace path="${ejb.jndi.path}/text()" withText="businessController${context2bis}" />
				</xmltask>
			</else>
		</if>

		<delete file="${fichierDeploiementEJB}.old"/>
	</target>

	<target name="majFichierDeploiementEJB.xmi">
		<copy file="${fichierDeploiementEJB}" tofile="${fichierDeploiementEJB}.old"/>

		<!-- récupération du nom du fichier (sans le chemin) -->
		<basename property="fichierDeploiementEJB.file" file="${fichierDeploiementEJB}" />

		<propertycopy name="ejb.jndi.token" from="${fichierDeploiementEJB.file}.jndi.token"/>
		
		<echo file="${log.file}" append="true">
		Les paramètres sont :
			fichierDeploiementEJB.file=${fichierDeploiementEJB.file}
			jndi.token = ${ejb.jndi.token}
		</echo>

		<if>
			<equals arg1="${ejb.jndi.token}" arg2=""/>
			<then>
				<echo file="${log.file}" append="true">
					pas de paramètre $${ejb.jndi.token}
				</echo>
			</then>
			<else>
				<replace file="${fichierDeploiementEJB}" token='${ejb.jndi.token}="businessControllerProxy"' value='${ejb.jndi.token}="businessController${context2bis}"' />
			</else>
		</if>
		<replace file="${fichierDeploiementEJB}" token='efluidProxy' value='${context2bis}' />

		<delete file="${fichierDeploiementEJB}.old"/>
	</target>

	<!--
	*********************************************************************
	Initialisations
	*********************************************************************
	-->
	<target name="init" depends="">

		<!-- ExecDir -->
		<if>
			<not><isset property="${execDir}"/></not>
		<then>
				<property name="execDir" value="${basedir}"/>
		</then>
		</if>
		<property name="root" value="${execDir}"/>

		<!-- xmlCommunDir -->
		<if>
			<not><isset property="${xmlCommunDir}"/></not>
		<then>
			<property name="xmlCommunDir" value="${basedir}/scripts"/>
		</then>
		</if>
		<property name="script.xml.commun.dir" value="${xmlCommunDir}"/>

		<property environment="env"/>
		<property name="temp.dir" value="${root}/tmplivraisons"/>
		<property name="livraisons.dir" value="${root}/../livraisons"/>
		<property name="cvs.dir" value="${temp.dir}/projet"/>
		<property name="projet.dir" value="${cvs.dir}"/>
		<property name="script.xml.dir" value="${root}/scripts"/>
		<property name="script.xml.properties.dir" value="${script.xml.dir}/properties"/>
		<property name="script.xml.dtd.dir" value="${script.xml.dir}/dtd"/>

		<property name="resources.dir" value="${root}/parametrage/application"/>

		<!--
		*********************************************************************
		Le répertoire de log et le fichier log du script
		*********************************************************************
		-->
			<buildnumber file="${basedir}/build.number"/>
			<tstamp>
				<format property="TODAY_UK" pattern="d-MMMM-yyyy hh:mm:ss" locale="en"/>
		</tstamp>

		<property name="log.dir" value="${temp.dir}/log.${build.number}"/>
		<property name="log.file" value="${log.dir}/reassemblageEJbProxy.log"/>
		<property name="properties.dir" value="${root}/properties"/>


		<!-- creation du répertoire et du fichier de log général -->
		<delete dir="${log.dir}"/>
		<mkdir dir="${log.dir}"/>

<echo file="${log.file}" append="true">
*********************************************************************
	Lancement du script de reassemblage de l'EJB Proxy d'efluid
*********************************************************************
	property.file=${property.file}
</echo>

		<!-- chargement d'un éventuel fichier properties avec les paramètres de lancement-->
		<if>
			<equals arg1="${property.file.dir}" arg2="$${property.file.dir}"/>
		<then>
			<property name="property.file.dir" value="scripts"/>
		</then>
		</if>
		<available file="${root}/${property.file.dir}/${property.file}" property="property.file.present" />
		<if>
			<equals arg1="${property.file.present}" arg2="true" />
			<then>

<echo file="${log.file}" append="true">
	Utilisation du fichier ${property.file}
</echo>

				<loadproperties srcFile="${root}/${property.file.dir}/${property.file}"/>
			</then>
			<else>

<echo file="${log.file}" append="true">
	Pas de fichier de propriétés dans ${root}\${property.file.dir}
</echo>
			</else>
		</if>
	
		<!-- librairies à inclure -->
		<if>
			<not><isset property="${librairies.specifiques}"/></not>
			<then>
				<property name="librairies.specifiques" value="${none}"/>
			</then>
			<else>
				<!-- le répetoire doit être indiqué dans ce cas -->
				<if>
					<not><isset property="${librairies.specifiques.dir}"/></not>
					<then>
						<fail message="le paramètre librairies.specifiques.dir est obligatoire"/>
					</then>
				</if>
			</else>
		</if>
		<if>
			<not><isset property="${librairies.specifiques.classpath}"/></not>
			<then>
				<property name="librairies.specifiques.classpath" value="${none}"/>
			</then>
		</if>
		<echo file="${log.file}" append="true">
			librairies.specifiques = ${librairies.specifiques}
			librairies.specifiques.dir = ${librairies.specifiques.dir}
			librairies.specifiques.classpath = ${librairies.specifiques.classpath}
		</echo>


		<!-- Serveur d'application -->
		<if>
			<or>
				<equals arg1="${typeAppServer}" arg2="$${typeAppServer}" />
				<equals arg1="${versionAppServer}" arg2="$${versionAppServer}" />
			</or>
			<then>
				<fail message="Le parametre typeAppServer est obligatoire"/>
			</then>
		</if>
		<property name="appserver.dtd.dir" value="${homeAppServeur}/${typeAppServer}/${versionAppServer}"/>
		<property name="appserver.property.dir" value="${homeAppServeur}/${typeAppServer}/${versionAppServer}"/>
		<if>
			<equals arg1="${appserver.property.file}" arg2="$${appserver.property.file}" />
			<then>
				<property name="appserver.property.file" value="appServer.properties"/>
			</then>
		</if>
		<available file="${appserver.property.dir}/${appserver.property.file}" property="appServer.property.file.present" />
		<if>
			<equals arg1="${appServer.property.file.present}" arg2="true" />
			<then>
<echo file="${log.file}" append="true">
		Fichier de paramétrage pour les EJB: ${appserver.property.file}
</echo>
				<loadproperties srcFile="${appserver.property.dir}/${appserver.property.file}"/>
			</then>
			<else>
				<fail message="Pas de fichier ${appserver.property.dir}/${appserver.property.file}"/>
			</else>
		</if>

		
		<if>
			<not><isset property="context1"/></not>
			<then><property name="context1" value="hermes"/></then>
		</if>

		<if>
			<not><isset property="context2"/></not>
			<then><property name="context2" value="hermes"/></then>
		</if>

		<property name="exported.dir" value="${root}/application/${context2}"/>
		<property name="parametrage.dir" value="${resources.dir}/${context2}"/>
		<property name="projet.j2ee.dir" value="${cvs.dir}/${cvs.basemodule}/${cvs.lot}/${cvs.tag}/j2ee/application/${context1}"/>
		<property name="module.dir" value="j2ee/application/${context1}"/>


		<!-- si context2bis=context2 ou context2 sans son sous-répertoire -->
		<basename property="context2bis" file="${exported.dir}/${context2}"/>

		<!-- les ressources particulières -->
		<property name="app_ear" value="${exported.dir}/${context2bis}.ear"/>
		<property name="ejb_jar" value="${exported.dir}/ear/businessControllerProxy.jar"/>

		<!-- connexion à CVS -->
		<if>
			<equals arg1="${cvs.login}" arg2="$${cvs.login}" />
			<then><property name="cvs.login" value="adminINT"/></then>
		</if>
		<if>
			<equals arg1="${cvs.server}" arg2="$${cvs.server}" />
			<then><property name="cvs.server" value="hermescvs"/></then>
		</if>
		<if>
			<equals arg1="${cvs.repo}" arg2="$${cvs.repo}" />
			<then><property name="cvs.repo" value="/INT"/></then>
		</if>
		<property name="cvs.root" value=":pserver:${cvs.login}@${cvs.server}:${cvs.repo}"/>

<echo file="${log.file}" append="true">
	Etape de démarrage du script : ${etape}
</echo>
		<switch value="${etape}">
			<case value="2">
				<property name="etape1" value="${etapeNonAutorisee}" />
			</case>
			<case value="3">
				<property name="etape1" value="${etapeNonAutorisee}"/>
				<property name="etape2" value="${etapeNonAutorisee}"/>
			</case>
			<case value="4">
				<property name="etape1" value="${etapeNonAutorisee}"/>
				<property name="etape2" value="${etapeNonAutorisee}"/>
				<property name="etape3" value="${etapeNonAutorisee}"/>
			</case>
			<default>
<echo file="${log.file}" append="true">
	=> Cas par défaut. Toutes les étapes du script seront exécutées
</echo>
			</default>
		</switch>
		<!--
		les property qui n'auraient pas été valuées précédemment le sont à présent.
		La valeur mise fait en sorte que l'étape est autorisée.
		-->
		<property name="etape1" value="${etapeAutorisee}"/>
		<property name="etape2" value="${etapeAutorisee}"/>
		<property name="etape3" value="${etapeAutorisee}"/>
		<property name="etape4" value="${etapeAutorisee}"/>

	</target>


	<!--
	*********************************************************************
	ETAPE 1 : récupération de l'assemblage
  *********************************************************************
  -->
	<target name="getFromCVS" depends="init">
<echo file="${log.file}" append="true">
*********************************************************************
		ETAPE 1 : Récupération de l'assemblage depuis CVS
*********************************************************************
	module.dir = ${module.dir}
</echo>
		<if>
			<equals arg1="${etape1}" arg2="${etapeAutorisee}" />
		<then>
			<if>
				<not><isset property="source.versionCVS"/></not>
			<then>
				<property name="source.versionCVS" value="LAST"/>
			</then>
			</if>

			<ant antfile="${script.xml.commun.dir}/getCibleFromCVS.xml" inheritall="true">
				<property name="cvs.module" value="${module.dir}"/>
				<property name="CvsProjetDir" value="${cvs.dir}"/>
				<property name="CvsVersion" value="${source.versionCVS}"/>
			</ant>

<echo file="${log.file}" append="true">
	les binaires de l'application ${module.dir} ont été récupérés
</echo>
		</then>
		<else>
<echo file="${log.file}" append="true">
	les binaires de l'application ${module.dir} n'ont pas été récupérés
</echo>
		</else>
		</if>
	</target>

  
	<!--
  *********************************************************************
  ETAPE 2 : Unzip des binaires.
   ********************************************************************
  -->
	<target name="unzip" depends="getFromCVS">
<echo file="${log.file}" append="true">
*********************************************************************
		ETAPE 2 : Unzip des binaires.
*********************************************************************
</echo>
		<if>
			<equals arg1="${etape2}" arg2="${etapeAutorisee}" />
		<then>
			<trycatch>
				<try>
					<mkdir dir="${exported.dir}"/>
				</try>
				<catch>
					<delete>
						<fileset dir="${exported.dir}/*.ear"/>
					</delete>
				</catch>
			</trycatch>

			<unzip src="${projet.j2ee.dir}/${context1}.ear"
				dest="${exported.dir}/ear">
			</unzip>
			<unzip src="${ejb_jar}"
				dest="${exported.dir}/jar">
			</unzip>

<echo file="${log.file}" append="true">
	OK
</echo>
		</then>
		<else>
<echo file="${log.file}" append="true">
	les binaires n'ont pas été dézippés
</echo>
		</else>
		</if>
	</target>

	<!--
	*********************************************************************
	ETAPE 3 : écrasement des fichiers de paramétrage.
	********************************************************************
	-->
	<target name="properties" depends="unzip">
<echo file="${log.file}" append="true">
*********************************************************************
	ETAPE 3 : écrasement des fichiers de paramétrage.

	gestion du paramétrage centralisé
*********************************************************************
</echo>
	<if>
 		<equals arg1="${etape3}" arg2="${etapeAutorisee}" />
	<then>
		<echo>gestionParametrageCentralise = ${gestionParametrageCentralise}</echo>
	
		<if>
			<not><isset property="params.file"/></not>
			<then><property name="params.file" value="parametrageefluidProxy.properties"/></then>
		</if>
			
		<ant antfile="${script.xml.commun.dir}/parametrageFichier.xml" inheritall="true">
			<property name="source.dir" value="${exported.dir}/ear"/>
			<property name="cible.dir" value="${exported.dir}/ear"/>
			<property name="params.dir" value="${parametrage.dir}"/>
			<property name="appli.brique" value="ear" />
			<property name="appli.type" value="efluidProxy"/>
		</ant>
				
		<!-- Mettre à jour les fichiers de deploiementEJB (cluster pour la PROD UEM par exemple) -->
		<copy todir="${exported.dir}/jar/META-INF" overwrite="true" >
			<fileset dir="${parametrage.dir}" includes="*-ejb-jar.xml,*.xmi"/>
		</copy>

<echo file="${log.file}" append="true">
	Modification des fichiers de déploiement EJB
</echo>

		<!-- Mettre à jour du fichier de deploiement EJB pour le type de serveur d'application concerné -->
		<for list="${ejb.deployement.file.name}" param="ejb.deployement.file" delimiter=",">
			<sequential>
				<propertyregex 	property="@{ejb.deployement.file}.extension" 
								input="@{ejb.deployement.file}" 
								regexp="([^\.]*)\.([^\.]*)" 
								select="\2" />

				<propertycopy name="file.extension" from="@{ejb.deployement.file}.extension"  override="true"/>				
				<switch value="${file.extension}">
					<case value="xml">
						<antcall target="majFichierDeploiementEJB.xml" inheritall="true">
							<param name="fichierDeploiementEJB" value="${exported.dir}/jar/META-INF/@{ejb.deployement.file}"/>
						</antcall>
					</case>
					<case value="xmi">
						<antcall target="majFichierDeploiementEJB.xmi" inheritall="true">
							<param name="fichierDeploiementEJB" value="${exported.dir}/jar/META-INF/@{ejb.deployement.file}"/>
						</antcall>
					</case>
				</switch>
			</sequential>
		</for>
		<!-- ejb-jar.xml  -->
		<copy file="${exported.dir}/jar/META-INF/ejb-jar.xml" tofile="${exported.dir}/jar/META-INF/ejb-jar.xml.old"/>
		<replace file="${exported.dir}/jar/META-INF/ejb-jar.xml" token='efluidProxy' value='${context2bis}' />
		<delete file="${exported.dir}/jar/META-INF/ejb-jar.xml.old"/> 

	</then>
	<else>

<echo file="${log.file}" append="true">
	les properties n'ont pas été copiés
</echo>

	</else>
	</if>
	</target>

  
	<!--
  *********************************************************************
  ETAPE 4 : Création de l'EAR de l'application
  
  on fait des try-catch sur le renommage de fichiers 
  pour pouvoir réexécuter à cette étape ou à l'étape d'avant sans devoir tout refaire
  *********************************************************************
  -->
	<target name="makeEar" depends="properties">
<echo file="${log.file}" append="true">
*********************************************************************
	ETAPE 4 : Création de l'EAR de l'application.
*********************************************************************
</echo>
		<if>
			<equals arg1="${etape4}" arg2="${etapeAutorisee}" />
		<then>

			<!-- constitution de l'EJB de l'appli -->
			<delete file="${ejb_jar}"/>
			<jar jarFile="${ejb_jar}" manifest="${exported.dir}/jar/META-INF/MANIFEST.MF">
				<zipfileset dir="${exported.dir}/jar"/>
			</jar>

			<!-- pré-déploiement de l'ejb pour jonas -->
			<if>
				<and>
					<equals arg1="${typeAppServer}" arg2="jonas" />
					<equals arg1="${genIC.deploy}" arg2="${oui}" />
				</and>
				<then>

					<path id="project.class.path">
						<fileset dir="${exported.dir}/ear">
							<include name="*.jar"/>
						</fileset>
					</path>

					<genic keepgenerated="true" protocols="jrmp,iiop"> 
						<classpath refid="project.class.path"/>
						<fileset dir="${exported.dir}/ear">
							<include name="businessControllerProxy.jar" />
						</fileset>
					</genic>
				</then>
			</if>

			<!-- copie des librairies supplémentaires -->
			<copy todir="${exported.dir}/ear" overwrite="true" flatten="true">
				<fileset dir="${librairies.specifiques.dir}" includes="${librairies.specifiques}"/>
			</copy>


			<!-- constitution de l'EAR de l'appli -->
			<delete file="${app_ear}"/>
			<ear earfile="${app_ear}" appxml="${exported.dir}/ear/META-INF/application.xml">
				<zipfileset dir="${exported.dir}/ear"/>
			</ear>

			<!-- nettoyage des sous-répertoires -->
			<delete dir="${exported.dir}/ear"/>
			<delete dir="${exported.dir}/jar"/>
		
<echo file="${log.file}" append="true">
	OK
</echo>
		</then>
		<else>
<echo file="${log.file}" append="true">
	le fichier EAR n'a pas été créé
</echo>
		</else>
		</if>
	</target>

	<target name="make">
		<antcall target="makeEar"/>
	</target>

</project>
