<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="integrationStrS" default="make" basedir="../.">

  <!-- ********************************************************************************* -->
  <!--		UTILISE POUR PACKAGER LES SOURCES STREAMSERVE                            -->
  <!-- ********************************************************************************* -->

  <!-- Ajout d'un package pour utiliser le task IF -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <!--
  *********************************************************************
    Ce script permet l'assemblage du module StreamServe
    
    	Ce script attend en paramètres obligatoires :
    		cvs.tag : version du module à récupérer.
		contextes : nom des contextes streamserve à récupérer
		cvs.server : nom du server CVS
		cvs.login : login du compte CVS
		cvs.repo : le repository concerné
		cvs.modules.clients : chemin CVS des modules clients
		lot : numéro du lot concerné

	La chaîne de lancement est donc (par exemple)
		call ant -f assemblageStrS.xml -Dcvs.tag=LIV_7_0_08 -Dproperty.file=streamserve.properties -Dproperty.file.dir=cmd\parametres -DexecDir=%EXEC_DIR% -DxmlCommunDir=%XML_HOME%\commun -DxmlDir=%XML_HOME%\streamserve

  *********************************************************************
  -->
  <!--*********************************************************************
  	Initialisations
  *************************************************************************
  -->
  <target name="init" depends="">

	<!-- ExecDir -->
	<if>
	<not><isset property="${execDir}"/></not>
	<then>
	<property name="execDir" value="${basedir}"/>
	</then>
	</if>
	<property name="root" value="${execDir}"/>
  
	<!-- xmlCommunDir -->
	<if>
		<not><isset property="${xmlCommunDir}"/></not>
	<then>
		<property name="xmlCommunDir" value="${basedir}/scripts"/>
	</then>
	</if>
	<property name="script.xml.commun.dir" value="${xmlCommunDir}"/>

	<property name="temp.dir" value="${root}/tmpStrS"/>
	<property name="cvs.dir" value="${temp.dir}/projet"/>
	<property name="checkout.dir" value="${temp.dir}/checkout"/>

	<!-- Indentifiant de l'exéction -->
	<buildnumber file="${root}/build.number"/>
	<tstamp>
		<format property="TODAY_UK" pattern="d-MMMM-yyyy hh:mm:ss" locale="en"/>
	</tstamp>

	<!-- chargement d'un éventuel fichier properties avec les paramètres de lancement-->
	<if>
		<equals arg1="${property.file.dir}" arg2="$${property.file.dir}"/>
	<then>
		<property name="property.file.dir" value="scripts"/>
	</then>
	</if>
	<available file="${root}/${property.file.dir}/${property.file}" property="property.file.present" />
	<if>
		<equals arg1="${property.file.present}" arg2="true" />
		<then>
			<echo>
	Utilisation du fichier ${property.file}
			</echo>
			<loadproperties srcFile="${root}/${property.file.dir}/${property.file}"/>
		</then>
		<else>
			<echo>
		Pas de fichier de propriétés dans ${root}\${property.file.dir}
			</echo>
		</else>
	</if>

	<property name="log.dir" value="${temp.dir}/log/streamserve.${build.number}"/>
	<property name="log.file" value="${log.dir}/assemblageStrS.log"/>
	
	<!-- creation du répertoire et du fichier de log général -->
	<delete dir="${log.dir}"/>
	<mkdir dir="${log.dir}"/>
	
	<echo file="${log.file}" append="true">
	*********************************************************************
		Lancement du script d'assemblage de StreamServe
	*********************************************************************
	</echo>
	
	<!--
	  *********************************************************************
		le résultat du script se trouve dans le répertoire exported.dir.
	  *******************************************************************
	-->
	<!-- les ressources particulières -->
	<property name="exported.dir" value="${root}"/>	
	
	<echo file="${log.file}" append="true">
		*********************************************************************
		Lancement du script de packaging
		*********************************************************************
		Parametres de lancement :
			contextes = ${contextes}
			contexte.produit = ${contexte.produit}
			cvs.tag = ${cvs.tag}
			cvs.module.clients = ${cvs.module.clients}
			lot = ${lot}
		</echo>
  </target>

  <!--
  *********************************************************************
  Récupération des différents modules listés dans le paramètre contextes
  puis zip des différents modules
  *********************************************************************
	-->
  <target name="makeZip" depends="init">
	<!--Récupération des modules -->
		<for list="${contextes}" delimiter="," param="data">
			<sequential>
				<!-- Nom du contexte -->
				<var name="contexte" value="@{data}" />
				
				<!-- Nom du module à récupérer -->
				<if>
					<equals arg1="@{data}" arg2="produit" />
				<then>
					<var name="cvs.module" value="${contexte.produit}" />
				</then>
				<else>
					<if>
						<not>
							<isset property="cvs.module.clients" />
						</not>
					<then>
						<echo file="${log.file}" append="true">
							Le paramètre cvs.module.clients n'a pas été renseigné.
						</echo>
						<fail message="Le paramètre cvs.module.clients n'a pas été renseigné."/>
					</then>
					<else>
						<!-- On vérifie s'il y a un module autre que HermesStrs (produit) à ramasser -->
						<if>
							<not>
								<isset property="contexte.specifique.@{data}" />
							</not>
						<then>
							<var name="cvs.module" value="${cvs.module.clients}/@{data}/HermesStrs" />
						</then>
						<else>
							<var name="cvs.module" value="${cvs.module.clients}/@{data}/${contexte.specifique.@{data}}" />
						</else>
						</if>
					</else>
					</if>
				</else>
				</if>
				
				<echo file="${log.file}" append="true">
	*********************************************************************
	ETAPE 1 : Récupération des sources CVS de ${cvs.module}
	*********************************************************************
				</echo>
				
				<delete	dir="${cvs.dir}"/>
				<mkdir	dir="${cvs.dir}"/>
				<delete	dir="${checkout.dir}"/>
		
				<ant antfile="${script.xml.commun.dir}/getSrcFromCVS.xml" inheritall="true">
					<property name="CvsProjetDir" value="${cvs.dir}"/>
				</ant>
				
				<echo file="${log.file}" append="true">
	*********************************************************************
	ETAPE 2 :	Création du zip (ou des zips) pour @{data}.
	*********************************************************************
				</echo>
				<record name="${log.dir}/makeZip@{data}.log" action="start" />
				
				<if>
					<not>
						<isset property="contexte.specifique.@{data}" />
					</not>
				<then>
					<var name="build.ss.dir" value="${cvs.dir}/${cvs.module}/work/Export"/>
					<ant antfile="${script.xml.commun.dir}/../streamserve/zipStrs.xml" inheritall="true" />
				</then>
					<else>
						<for list="${modules.@{data}}" delimiter="," param="module">
							<sequential>
								<!-- Modification de la variable contexte pour ajouter le nom du module spécifique au nom du zip -->
								<var name="contexte" value="${contexte}@{module}" />
								
								<!-- boucle sur contexte.@{module} pour récupérer les valeurs -->
								<var name="build.ss.dir" value="${cvs.dir}/${cvs.module}/work/@{module}"/>
								
								<ant antfile="${script.xml.commun.dir}/../streamserve/zipStrs.xml" inheritall="true" />
								
								<!-- Réinitialisation de la variable contexte avec la valeur de départ -->
								<var name="contexte" value="@{data}" />
							</sequential>
						</for>
					</else>
				</if>
			</sequential>
		</for>
  </target>
  
  <target name="make">
    <antcall target="makeZip"/>
  </target>
</project>
