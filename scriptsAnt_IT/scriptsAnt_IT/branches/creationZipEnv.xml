<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="creationZipEnv" default="make" basedir="../.">

	<!-- Ajout d'un package pour utiliser le task IF -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

	<!--
	*********************************************************************
	 Ce sript permet de créer un zip des l'env. de dev et/ou d'archi pour une branche donnée

	 Etapes du scripts :
	 	Initialisations
	 	1. checkout CVS 
	 	2. modif des mapping map4j (optionnel)
		3. compilation java (optionnel)
		4. création du zip

	 Ce script attend en paramètre :

	OBLIGATOIRES
	cvs.branche		: branche à récupére. Ex. HERMES_8_0_13
	env.cvs.module	: module concernée. Ex. developpement_dev/efluidEDK, clients, documentation
	env.version		: suffixe du zip, sert aussi à aller chercher le paramétrage de construction. Ex. 8_0_13
	env.zip.name		: prefixe du zip. Ex. efluidEDK, developpement_dev
	
	FACULTATIFS
	env.dir.clean		: liste des répetoires (séparés par des virgules) à supprimer après le checkout,qui ne seront pas inclus dans le zip. Ex. hermesStrs, ael(quand env.cvs.module=developpement_dev)
	compile		: Y si on souhaite compiler le code java. N par défaut.
	compile.modules	: liste des modules à compiler, séparés par des vigules. Ex. efluidEDK, ael
	ldap.home		: répertoires où se trouve les jar ldap pour compiler le code
	oracle.home		: répertoires où se trouve les jar oracle pour compiler le code
	appServer.home	: répertoires où se trouve les jar du serveur d'application pour compiler le code

	replace.mapping	: Y si on souhaite changer le nom du module dans les chemins des fichiers de mapping MAP4J. N par défaut.
	replace.mapping.modules : liste des modules, séparés par des virgules, pour lesquels on souhaite faire le remplacement des chemins de mappings. Ex. efluidEDK, ael

	cvs.login		: nom du user pour la connexion à CVS. Par défaut ce paramètre vaut adminDev
	cvs.server 		: nom du serveur sur lequel se trouve la base CVS. Par défaut lausanne
	cvs.repo		: nom du repository CVS. Par défaut DEV
	Ces trois paramètres peuvent être remplacé par un paramètre global (cvs.root=:pserver:${cvs.login}@${cvs.server}:${cvs.repo})
	etape 		: etape de démmarrage du script. Pas de valeur par défaut (=> 1)
	property.file.dir	: réperoitoire où se trouve le fichier des propriétés de construction. Ex. 8013. Dans ce cas, le répertoire sera ${root}/parametrage/8013
	property.file	: fichier des propriétés de construction. Ex. zip_hermes.properties
	
	Avant de lancer le script fixer les paramètres d'environnement.
	JAVA_HOME
	ANT_HOME
	CVS_HOME
	set PATH=%PATH%;%ANT_HOME%\bin;%JAVA_HOME%\bin;%CVS_HOME%

	La chaîne de lancement est par exemple :

	ant -f creationZipEnv.xml -Dproperty.file=zip_efluidEDK.properties -Dproperty.file.dir=8013

	*********************************************************************
	-->

	<!-- ExecDir -->
	<if>
		<not><isset property="${execDir}"/></not>
		<then><property name="execDir" value="${basedir}"/></then>
	</if>
	<property name="root" value="${execDir}"/>
	<property name="zip.dir" value="${root}/livrables"/>
	<property name="tmp.dir" value="${root}/tmp"/>
	<property name="cvs.dir.root" value="${tmp.dir}"/>
	<property name="parametrage.dir" value="${root}/parametrage"/>
	<property name="cvs.tronc" value="TRONC"/>

	<property name="cmd.checkout" value="-r checkout"/>
	<property name="cmd.checkout.empty" value="-r checkout -l"/>
	<property name="oui" value="Y"/>
	<property name="non" value="N"/>


	<!-- la cible d'initialisation -->
	<target name="init" depends="">
		<!-- Indentifiant de l'exéction -->
		<buildnumber file="${root}/build.number"/>
		<tstamp>
			<format property="TODAY_UK" pattern="d-MMMM-yyyy hh:mm:ss" locale="en"/>
		</tstamp>

		<!-- creation du répertoire et du fichier de log général -->
		<property name="log.dir" value="${tmp.dir}/log.${build.number}"/>
		<property name="log.file" value="${log.dir}/creerZipEnv.log"/>
		<mkdir dir="${log.dir}"/>

		<echo file="${log.file}" append="true">
*********************************************************************
	Récupération des environnnements et création des zips
*********************************************************************
		</echo>

		<!-- chargement d'un éventuel fichier properties avec les paramètres de lancement-->
		<if>
			<equals arg1="${property.file.dir}" arg2="$${property.file.dir}"/>
		<then>
			<property name="property.file.dir" value="scripts"/>
		</then>
		</if>
		<available file="${parametrage.dir}/${property.file.dir}/${property.file}" property="property.file.present" />
		<if>
			<equals arg1="${property.file.present}" arg2="true" />
			<then>
				<echo file="${log.file}" append="true">
			Utilisation du fichier ${property.file}
				</echo>
				<loadproperties srcFile="${parametrage.dir}/${property.file.dir}/${property.file}"/>
			</then>
			<else>
				<echo file="${log.file}" append="true">
			Pas de fichier de propriétés dans ${parametrage.dir}\${property.file.dir}
				</echo>
			</else>
		</if>

		<if>
			<equals arg1="${env.version}" arg2="$${env.version}" />
			<then>
				<input message="Quelle version voules-vous récupérer (ex : 3_0 ou TRONC)?" addproperty="env.version" />
			</then>
		</if>
		<if>
			<equals arg1="${env.cvs.module}" arg2="$${env.cvs.module}" />
			<then>
				<input message="Quelle module voules-vous récupérer (ex : developpement_dev, hermesArchi)?" addproperty="env.cvs.module" />
			</then>
		</if>
		<property name="cvs.branche.prefixe" value="HERMES"/>
		<if>
			<equals arg1="${env.version}" arg2="${cvs.tronc}"/>
		<then>
			<property name="cvs.branche" value="${cvs.tronc}"/>
			<property name="env.zip" value="${zip.dir}\${env.zip.name}.zip"/>
		</then>
	    <else>
	        <property name="cvs.branche" value="${cvs.branche.prefixe}_${env.version}"/>
	        <property name="env.zip" value="${zip.dir}/${env.zip.name}_${env.version}.zip"/>
	      </else>
	    </if>
	    <property name="cvs.dir" value="${cvs.dir.root}/${env.version}"/>
	    <property name="env.dest" value="${cvs.dir}/${env.cvs.module}"/>
		<basename property="module.name" file="${env.dest}"/>

		<!-- connexion à CVS -->
		<if>
			<equals arg1="${cvs.login}" arg2="$${cvs.login}" />
			<then><property name="cvs.login" value="adminDEV"/></then>
		</if>
		<if>
			<equals arg1="${cvs.server}" arg2="$${cvs.server}" />
			<then><property name="cvs.server" value="hermescvs"/></then>
		</if>
		<if>
			<equals arg1="${cvs.repo}" arg2="$${cvs.repo}" />
			<then><property name="cvs.repo" value="/DEV"/></then>
		</if>
		<property name="cvs.root" value=":pserver:${cvs.login}@${cvs.server}:${cvs.repo}"/>

		<switch value="${etape}">
			<case value="2">
				<property name="etape1" value="${non}" />
			</case>
			<case value="3">
				<property name="etape1" value="${non}" />
				<property name="etape2" value="${non}" />
			</case>
			<case value="4">
				<property name="etape1" value="${non}" />
				<property name="etape2" value="${non}" />
				<property name="etape3" value="${non}" />
			</case>
			<default>
				<echo file="${log.file}" append="true">
	=> Cas par défaut. Toutes les étapes du script seront exécutées
				</echo>
			</default>
		</switch>
		<property name="etape1" value="${oui}"/>
		<property name="etape2" value="${oui}"/>	
		<property name="etape3" value="${oui}"/>	
		<property name="etape4" value="${oui}"/>	

		<echo file="${log.file}" append="true">
	cvs.root      	: ${cvs.root}
	cvs.branche   	: ${cvs.branche}
	env.cvs.module	: ${env.cvs.module}
	env.zip     	: ${env.zip}
	etape			: ${etape}
		</echo>
	</target>


<!--	Récupération d'une copie locale du module fonctionnel dans le répertoire tmp -->
	<target name="getFromCVS" depends="">
		<delete dir="${cvs.dir}"/>
		<mkdir dir="${cvs.dir}"/>

		<if>
			<equals arg1="${cvs.branche}" arg2="${cvs.tronc}" />
		<then>
    		<cvs cvsRoot="${cvs.root}" package="${env.cvs.module}" dest="${cvs.dir}" />
    	</then>
    	<else>
			<cvs cvsRoot="${cvs.root}" package="${env.cvs.module}" dest="${cvs.dir}" tag="${cvs.branche}" command="-r checkout"/>
		</else>
		</if>
		<antcall target="cleanRecup"/>
	</target>

<!--	Récupération d'une copie locale du module fonctionnel dans le répertoire tmp -->
	<target name="cleanRecup">
		<for list="${env.dir.clean}" param="read" delimiter=",">
			<sequential>
				<trycatch>
					<try>
				        <delete>
				          <fileset dir="${env.dest}/@{read}"/>
				        </delete>
					</try>
					<catch>
						<echo file="${log.file}" append="true">
	Le module à supprimer n'existe pas (${env.dest}/@{read})
						</echo>
					</catch>
				</trycatch>
			</sequential>
		</for>
  </target>


<!--	création des zips.... -->
	<target name="makeZip">
		<mkdir dir="${zip.dir}"/>
   		<delete file="${env.zip}"/>
	    <zip destfile="${env.zip}" defaultexcludes="no" encoding="iso-8859-1">
		    <zipfileset dir="${env.dest}" prefix="" defaultexcludes="no"/>
   		</zip>
		<echo file="${log.file}" append="true">
	Le zip ${env.zip} a été constitué
		</echo>
	 </target>

<!--	modification des mapping map4j : 
	remplacer developpement_dev par developpement_<version> ou hermesArchi par hermesArchi_<version> -->
	<target name="map4j">
		<if>
			<and>
				<equals arg1="${replace.mapping}" arg2="${oui}"/>
				<not><equals arg1="${cvs.branche}" arg2="${cvs.tronc}" /></not>
			</and>
		<then>
			<if>
				<equals arg1="${replace.mapping.modules}" arg2="${module.name}" />
			<then>
				<antcall target="modifMap4j">
					<param name="mapping.dir" value="${env.dest}/mapping"/>
				</antcall>
			</then>
			<else>
				<for list="${replace.mapping.modules}" param="read" delimiter=",">
					<sequential>
						<antcall target="modifMap4j">
							<param name="mapping.dir" value="${env.dest}/@{read}/mapping"/>
						</antcall>
					</sequential>
				</for>
			</else>
			</if>
		</then>
		</if>
	</target>

	<target name="modifMap4j">
		<replace dir="${mapping.dir}" token="eveloppement_dev" value="eveloppement_${env.version}" summary="yes" defaultexcludes="no">
			<include name="**/*.mpj"/>
		</replace>
		<replace dir="${mapping.dir}" token="hermesArchi" value="hermesArchi_${env.version}" summary="yes" defaultexcludes="no">
			<include name="**/*.mpj"/>
		</replace>
		<echo file="${log.file}" append="true">
	Les mapping du module ${module.name} ont été traités
		</echo>
	</target>
	
<!--	compilation java  -->
	<target name="compilation">
		<if>
			<equals arg1="${compile}" arg2="${oui}"/>
		<then>
			<if>
				<equals arg1="${compile.modules}" arg2="${module.name}" />
			<then>
				<antcall target="compileCodeJava">
					<param name="module.dir" value="${env.dest}"/>
				</antcall>
			</then>
			<else>
				<for list="${compile.modules}" param="read" delimiter=",">
					<sequential>
						<antcall target="compileCodeJava">
							<param name="module.dir" value="${env.dest}/@{read}"/>
						</antcall>
					</sequential>
				</for>
			</else>
			</if>
		</then>
		</if>
	</target>

	<target name="compileCodeJava">
		<!-- classpath de compilation des sources java -->
		<path id="project.class.path">
			<fileset dir="${module.dir}\lib">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${module.dir}\scripts\lib">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${ldap.home}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${oracle.home}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${appServer.home}">
				<include name="**/*.jar"/>
			</fileset>
		</path>
		
		<var name="build.dir" value="${module.dir}\classes"/>
		<delete	dir="${build.dir}"/>
		<mkdir dir="${build.dir}" />

		<!-- il faut supprimer les classes de test unitaires -->
		<delete includeEmptyDirs="true" >
			<fileset dir="${module.dir}\src" caseSensitive="yes">
				<include name="**/test/**/*.*" />
			</fileset>
			<fileset dir="${module.dir}\src" caseSensitive="yes">
				<include name="**/jeudetest/**/*.*" />
			</fileset>
		</delete>
		
		<javac srcdir="${module.dir}\src" destdir="${build.dir}" debug="on">
			<classpath refid="project.class.path"/>
		</javac>
		
		<!-- il faut copier les properties -->
		<copy todir="${build.dir}">
			<fileset dir="${module.dir}\properties" />
			<fileset dir="${module.dir}\src" excludes="**/*.java"/>
		</copy>

		<unset name="build.dir" />
		<echo file="${log.file}" append="true">
	Le code java du module @{read} a été compilé
		</echo>				
	</target>
	
	<target name="make" depends="init">
		<if>
			<equals arg1="${etape1}" arg2="${oui}"/>
			<then>
				<antcall target="getFromCVS"/>
			</then>
		</if>
		<if>
			<equals arg1="${etape2}" arg2="${oui}"/>
			<then>
				<antcall target="map4j"/>
			</then>
		</if>
		<if>
			<equals arg1="${etape3}" arg2="${oui}"/>
			<then>
				<antcall target="compilation"/>
			</then>
		</if>
		<if>
			<equals arg1="${etape4}" arg2="${oui}"/>
			<then>
				<antcall target="makeZip"/>
			</then>
		</if>
	</target>

</project>
