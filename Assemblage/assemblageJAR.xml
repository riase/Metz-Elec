<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="assemblageJAR" default="make" basedir=".">

	<!-- Ajout d'un package pour utiliser le task IF -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<!--
	*********************************************************************
		Ce script permet de créer un JAR.
		
		Ce script attend en paramètre :

		=> OBLIGATOIRES
			* codeApplication		: Code de l'application (efluid, efluidPub...)
			* nomLivrableFormate	: Nom du livrable final sans l'extension.
			* ClassPath_JAR			: Classpath d'exécution à intégrer au MANIFEST.MF. 
			* packageVersion		: Chemin du package utile pour renseigner la version dans le fichier MANIFEST.MF.
			* moduleCVSDir 			: Chemin complet du module CVS

		=> OPTIONNELS
			* ClassPath_JAR_DEBUG				: Classpath d'exécution en mode debug à intégrer au MANIFEST.MF.
			* tagVersionCible					: Tag de la version assemblée.
					Ex.: LIV_9_0_09
			* librairiesCompilationProjet		: Liste des librairies générées pour le projet séparées par une virgule, utiles pour la compilation.
					Ex.: hermesArchi.jar,framework.jar
			* librairiesCompilationSpecifiques	: Liste des librairies séparées par une virgule utiles à la compilation.
					Ex.: verity\\5.5\\vadmin.jar,ldap\\*.jar,Oracle\\*.jar
		
	*********************************************************************
	-->
		
	<!--
	*********************************************************************
	Initialisations
	*********************************************************************
	-->
	<target name="init" depends="">
		<!-- composants.properties -->
		<property name="composants.properties" value="composants.properties" />
		<available file="${composants.properties}" property="composants.properties.present" />
		<if>
			<equals arg1="${composants.properties.present}" arg2="true" />
			<then>
				<echo message="Utilisation du fichier ${composants.properties}" />

				<loadproperties srcFile="${composants.properties}" />
			</then>
			<else>
				<echo message="Pas de fichier ${composants.properties} propriétés dans ${basedir}" />
			</else>
		</if>

		<!-- livrable.properties -->
		<property name="livrable.properties" value="livrable.properties" />
		<available file="${livrable.properties}" property="livrable.properties.present" />
		<if>
			<equals arg1="${livrable.properties.present}" arg2="true" />
			<then>
				<echo message="Utilisation du fichier ${livrable.properties}" />

				<loadproperties srcFile="${livrable.properties}" />
			</then>
			<else>
				<echo message="Pas de fichier ${livrable.properties} propriétés dans ${basedir}" />
			</else>
		</if>
		
		<!-- traitement.properties -->
		<property name="traitement.properties" value="traitement.properties" />
		<available file="${traitement.properties}" property="traitement.properties.present" />
		<if>
			<equals arg1="${traitement.properties.present}" arg2="true" />
			<then>
				<echo message="Utilisation du fichier ${traitement.properties}" />

				<loadproperties srcFile="${traitement.properties}" />
			</then>
			<else>
				<echo message="Pas de fichier ${traitement.properties} propriétés dans ${basedir}" />
			</else>
		</if>
		
		<!-- Property utile pour récupérer les varaibles d'environnements -->
		<property environment="env" />
		
		<!-- on recupère les fichiers dont le script à besoin -->
		<copy file="${env.MODE_TRAITEMENT_HOME}/Assemblage/compilationClasses.xml" todir="." />
		<copy file="${env.MODE_TRAITEMENT_HOME}/Assemblage/getSrcFromCVS.xml" todir="." />
		<copy file="${env.MODE_TRAITEMENT_HOME}/TraitementUnitaire/traitementLivrablesUnitairesInclus.xml" todir="${basedir}" />

		<!-- Verification des paramètres obligatoires -->
		<if>
			<or>
				<equals arg1="${codeApplication}" arg2="$${codeApplication}" />
				<equals arg1="${nomLivrableFormate}" arg2="$${nomLivrableFormate}" />
				<equals arg1="${ClassPath_JAR}" arg2="$${ClassPath_JAR}" />
				<equals arg1="${packageVersion}" arg2="$${packageVersion}" />
			</or>
			<then>
				<fail message="Assemblage JAR : il manque un ou plusieurs parametres obligatoires"/>
			</then>
		</if>

		<!-- Date/heure de l'exécution -->
		<tstamp>
			<format property="TODAY_FR" pattern="d-MMMM-yyyy hh:mm:ss" locale="fr" />
		</tstamp>

		<!-- Le répertoire de log et le fichier log du script (spécifique à chaque exécution pour garder un historique) -->
		<property name="log.dir" value="log" />
		<property name="log.file" value="${log.dir}/assemblageJAR.log" />
		
		<!-- creation du répertoire et du fichier de log général -->
		<mkdir dir="${log.dir}" />

		<echo file="${log.file}" append="true">
		*********************************************************************
		Lancement du script d'assemblage JAR
		*********************************************************************
		</echo>

		<!--
		*********************************************************************
		le résultat du script se trouve dans le répertoire ${basedir}.
		Il s'agit de : un jar
		*******************************************************************
		-->

		<!-- les ressources particulières -->
		<property name="build.compilation.dir" value="classes" />
		<property name="app.jar" value="${nomLivrableFormate}.jar" />
		<property name="sourceCheckout.dir" value="checkout"/>

		<echo file="${log.file}" append="true">
		Parametres de lancement :
			context = ${nomLivrableFormate}
			application = ${codeApplication}
			
		Nom du jar : ${app.jar}
		</echo>

		<if>
			<equals arg1="${JDK_MODE}" arg2="debug" />
			<then>
				<if>
					<equals arg1="${ClassPath_JAR_DEBUG}" arg2="$${ClassPath_JAR_DEBUG}" />
					<then>
						<fail message="Assemblage JAR - Mode DEBUG : le parametre ClassPath_JAR_DEBUG n'est pas renseigne dans le fichier ${livrable.properties}"/>
					</then>
					<else>
						<property name="ClassPath" value="${ClassPath_JAR_DEBUG}" />
					</else>
				</if>
			</then>
			<else>
				<property name="ClassPath" value="${ClassPath_JAR}" />
			</else>
		</if>
	</target>

	<!--
	*********************************************************************
	Récupération des sources dans ${sourceCheckout.dir}
	*********************************************************************
	-->
	<target name="recuperationSource" depends="init">
		<echo file="${log.file}" append="true">
		*********************************************************************
		Récupération des sources.
		*********************************************************************
			Les sources sont récupérées dans le répertoire ${sourceCheckout.dir}
		</echo>
		
		<ant antfile="getSrcFromCVS.xml" inheritall="true">
			<property name="checkoutDir" value="${sourceCheckout.dir}"/>
		</ant>
	</target>


	<!--
	*********************************************************************
	Récupération des livrables unitaires éventuels pour la compilation dans basedir
	*********************************************************************
	-->
	<target name="recuperationLivrablesUnitaires" depends="recuperationSource">
		<echo file="${log.file}" append="true">
		*********************************************************************
		Récupération des livrables unitaires éventuels pour la compilation dans basedir
		*********************************************************************
			Les livrables unitaires sont récupérés
		</echo>
	<!-- récupération des livrables unitaires -->
  	<available file="livrablesUnitairesInclusion.properties" property="livrablesUnitairesInclusion.properties.present" />
	<if>
		<equals arg1="${livrablesUnitairesInclusion.properties.present}" arg2="true" />
		<then>
			<!-- On charge le fichier livrablesUnitairesInclusion.properties pour acceder aux données qu'il contient -->
			<loadproperties srcFile="livrablesUnitairesInclusion.properties" />
			<ant antfile="traitementLivrablesUnitairesInclus.xml" inheritall="true" >
				<property name="livrablesUnitairesInclusion.properties" value="livrablesUnitairesInclusion.properties" />
			  	<property name="livrablesUnitaires.dir" value="${basedir}" />
				<property name="log.dir" value="${log.dir}"/>
				<property name="log.file" value="${log.file}"/>
			</ant>
		</then>
	</if>
	</target>

	<!--
	*********************************************************************
	Compilation des sources java de ${sourcejava.dir} vers ${build.compilation.dir}
	*********************************************************************
	-->
	<target name="compilation" depends="recuperationLivrablesUnitaires">
		<echo file="${log.file}" append="true">
		*********************************************************************
		Compilation des sources.
		*********************************************************************
			Le résultat de la compilation se trouve dans le fichier compilationClasses.log
		</echo>
		
		<ant antfile="compilationClasses.xml" inheritall="true">
			<property name="sourceACompiler.dir" value="${sourceCheckout.dir}"/>
			<property name="build.dir" value="${build.compilation.dir}"/>
			<property name="librairiesCompilationProjet.dir" value="${basedir}"/>
		</ant>
	</target>

	<!--
	*********************************************************************
	Création du JAR de l'application
	*********************************************************************
	-->
	<target name="makeJar" depends="compilation">
		<echo file="${log.file}" append="true">
		*********************************************************************
		Création du JAR
		*********************************************************************
		</echo>
		
		<!-- On vérifie la présence d'un éventuel fichier MANIFEST.MF -->
		<available file="${sourceCheckout.dir}/${moduleCVSDir}/${sourceDir}/META-INF" type="dir" property="meta-inf.present" />
		<if>
			<equals arg1="${meta-inf.present}" arg2="$${meta-inf.present}" />
			<then>
				<mkdir dir="${build.compilation.dir}/META-INF" />
			</then>
			<else>
				<copy todir="${build.compilation.dir}/META-INF" overwrite="true">
					<fileset dir="${sourceCheckout.dir}/${moduleCVSDir}/${sourceDir}/META-INF" />
				</copy>
			</else>
		</if>
				
		<manifest file="${build.compilation.dir}\META-INF\MANIFEST.MF">
			<attribute name="Built-By" value="ebuild" />
			<attribute name="Built-Date" value='${TODAY_FR}' />
			<attribute name="Class-Path" value='${ClassPath}' />
			<section name="${packageVersion}">
				<attribute name="Specification-Title" value="${codeApplication}" />
				<attribute name="Specification-Version" value="${tagVersionCible}" />
				<attribute name="Specification-Vendor" value="CGI France - UEM" />
				<attribute name="Implementation-Title" value="${codeApplication}" />
				<attribute name="Implementation-Version" value="${tagVersionCible}.${refRegroupement}.${refTraitement}" />
				<attribute name="Implementation-Vendor" value="CGI France - UEM" />
			</section>
		</manifest>

		<jar jarfile="${app.jar}" basedir="${build.compilation.dir}" manifest="${build.compilation.dir}\META-INF\MANIFEST.MF" />

		<echo file="${log.file}" append="true">
		OK
		</echo>
	</target>

	<target name="make">
		<antcall target="makeJar" />
	</target>
</project>
